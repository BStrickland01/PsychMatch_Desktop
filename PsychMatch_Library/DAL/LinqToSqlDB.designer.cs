#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PSL.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_A4221B_Psychmatch")]
	public partial class LinqToSqlDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblClinician(tblClinician instance);
    partial void UpdatetblClinician(tblClinician instance);
    partial void DeletetblClinician(tblClinician instance);
    partial void InserttblAddress(tblAddress instance);
    partial void UpdatetblAddress(tblAddress instance);
    partial void DeletetblAddress(tblAddress instance);
    partial void InserttblEmployer(tblEmployer instance);
    partial void UpdatetblEmployer(tblEmployer instance);
    partial void DeletetblEmployer(tblEmployer instance);
    partial void InserttblAdminUser(tblAdminUser instance);
    partial void UpdatetblAdminUser(tblAdminUser instance);
    partial void DeletetblAdminUser(tblAdminUser instance);
    partial void InserttblAvailability(tblAvailability instance);
    partial void UpdatetblAvailability(tblAvailability instance);
    partial void DeletetblAvailability(tblAvailability instance);
    partial void InserttblJob(tblJob instance);
    partial void UpdatetblJob(tblJob instance);
    partial void DeletetblJob(tblJob instance);
    partial void InserttblLanguage(tblLanguage instance);
    partial void UpdatetblLanguage(tblLanguage instance);
    partial void DeletetblLanguage(tblLanguage instance);
    partial void InserttblPositionType(tblPositionType instance);
    partial void UpdatetblPositionType(tblPositionType instance);
    partial void DeletetblPositionType(tblPositionType instance);
    partial void InserttblServiceType(tblServiceType instance);
    partial void UpdatetblServiceType(tblServiceType instance);
    partial void DeletetblServiceType(tblServiceType instance);
    partial void InserttblYearsExperience(tblYearsExperience instance);
    partial void UpdatetblYearsExperience(tblYearsExperience instance);
    partial void DeletetblYearsExperience(tblYearsExperience instance);
    partial void InserttblJobJobExperienceType(tblJobJobExperienceType instance);
    partial void UpdatetblJobJobExperienceType(tblJobJobExperienceType instance);
    partial void DeletetblJobJobExperienceType(tblJobJobExperienceType instance);
    partial void InserttblJobLanguage(tblJobLanguage instance);
    partial void UpdatetblJobLanguage(tblJobLanguage instance);
    partial void DeletetblJobLanguage(tblJobLanguage instance);
    partial void InserttblJobExperienceType(tblJobExperienceType instance);
    partial void UpdatetblJobExperienceType(tblJobExperienceType instance);
    partial void DeletetblJobExperienceType(tblJobExperienceType instance);
    partial void InserttblJobPatientPopulationType(tblJobPatientPopulationType instance);
    partial void UpdatetblJobPatientPopulationType(tblJobPatientPopulationType instance);
    partial void DeletetblJobPatientPopulationType(tblJobPatientPopulationType instance);
    partial void InserttblPatientPopulationType(tblPatientPopulationType instance);
    partial void UpdatetblPatientPopulationType(tblPatientPopulationType instance);
    partial void DeletetblPatientPopulationType(tblPatientPopulationType instance);
    partial void InserttblClinicianType(tblClinicianType instance);
    partial void UpdatetblClinicianType(tblClinicianType instance);
    partial void DeletetblClinicianType(tblClinicianType instance);
    partial void InserttblEmrErxExperienceType(tblEmrErxExperienceType instance);
    partial void UpdatetblEmrErxExperienceType(tblEmrErxExperienceType instance);
    partial void DeletetblEmrErxExperienceType(tblEmrErxExperienceType instance);
    partial void InserttblEmployerClinicianStatus(tblEmployerClinicianStatus instance);
    partial void UpdatetblEmployerClinicianStatus(tblEmployerClinicianStatus instance);
    partial void DeletetblEmployerClinicianStatus(tblEmployerClinicianStatus instance);
    partial void InserttblGeneralStatus(tblGeneralStatus instance);
    partial void UpdatetblGeneralStatus(tblGeneralStatus instance);
    partial void DeletetblGeneralStatus(tblGeneralStatus instance);
    #endregion
		
		public LinqToSqlDBDataContext() : 
				base(global::PSL.Properties.Settings.Default.DB_A4221B_PsychmatchConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblClinician> tblClinicians
		{
			get
			{
				return this.GetTable<tblClinician>();
			}
		}
		
		public System.Data.Linq.Table<tblAddress> tblAddresses
		{
			get
			{
				return this.GetTable<tblAddress>();
			}
		}
		
		public System.Data.Linq.Table<tblEmployer> tblEmployers
		{
			get
			{
				return this.GetTable<tblEmployer>();
			}
		}
		
		public System.Data.Linq.Table<tblAdminUser> tblAdminUsers
		{
			get
			{
				return this.GetTable<tblAdminUser>();
			}
		}
		
		public System.Data.Linq.Table<tblAvailability> tblAvailabilities
		{
			get
			{
				return this.GetTable<tblAvailability>();
			}
		}
		
		public System.Data.Linq.Table<tblJob> tblJobs
		{
			get
			{
				return this.GetTable<tblJob>();
			}
		}
		
		public System.Data.Linq.Table<tblClinicianLanguage> tblClinicianLanguages
		{
			get
			{
				return this.GetTable<tblClinicianLanguage>();
			}
		}
		
		public System.Data.Linq.Table<tblLanguage> tblLanguages
		{
			get
			{
				return this.GetTable<tblLanguage>();
			}
		}
		
		public System.Data.Linq.Table<tblPositionType> tblPositionTypes
		{
			get
			{
				return this.GetTable<tblPositionType>();
			}
		}
		
		public System.Data.Linq.Table<tblServiceType> tblServiceTypes
		{
			get
			{
				return this.GetTable<tblServiceType>();
			}
		}
		
		public System.Data.Linq.Table<tblYearsExperience> tblYearsExperiences
		{
			get
			{
				return this.GetTable<tblYearsExperience>();
			}
		}
		
		public System.Data.Linq.Table<tblJobJobExperienceType> tblJobJobExperienceTypes
		{
			get
			{
				return this.GetTable<tblJobJobExperienceType>();
			}
		}
		
		public System.Data.Linq.Table<tblJobLanguage> tblJobLanguages
		{
			get
			{
				return this.GetTable<tblJobLanguage>();
			}
		}
		
		public System.Data.Linq.Table<tblJobExperienceType> tblJobExperienceTypes
		{
			get
			{
				return this.GetTable<tblJobExperienceType>();
			}
		}
		
		public System.Data.Linq.Table<tblJobPatientPopulationType> tblJobPatientPopulationTypes
		{
			get
			{
				return this.GetTable<tblJobPatientPopulationType>();
			}
		}
		
		public System.Data.Linq.Table<tblPatientPopulationType> tblPatientPopulationTypes
		{
			get
			{
				return this.GetTable<tblPatientPopulationType>();
			}
		}
		
		public System.Data.Linq.Table<tblClinicianType> tblClinicianTypes
		{
			get
			{
				return this.GetTable<tblClinicianType>();
			}
		}
		
		public System.Data.Linq.Table<tblEmrErxExperienceType> tblEmrErxExperienceTypes
		{
			get
			{
				return this.GetTable<tblEmrErxExperienceType>();
			}
		}
		
		public System.Data.Linq.Table<tblEmployerClinicianStatus> tblEmployerClinicianStatus
		{
			get
			{
				return this.GetTable<tblEmployerClinicianStatus>();
			}
		}
		
		public System.Data.Linq.Table<tblGeneralStatus> tblGeneralStatus
		{
			get
			{
				return this.GetTable<tblGeneralStatus>();
			}
		}
		
		public System.Data.Linq.Table<tblClinicianJob> tblClinicianJobs
		{
			get
			{
				return this.GetTable<tblClinicianJob>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClinician")]
	public partial class tblClinician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClinicianID;
		
		private string _UserName;
		
		private string _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _EmailAddress;
		
		private string _PhoneNumber;
		
		private System.DateTime _RegistrationDate;
		
		private int _ClinicianTypeID;
		
		private int _StatusID;
		
		private int _AddressID;
		
		private int _LanguageID;
		
		private int _LiscenseID;
		
		private EntitySet<tblAddress> _tblAddresses;
		
		private EntitySet<tblClinicianType> _tblClinicianTypes;
		
		private EntitySet<tblEmployerClinicianStatus> _tblEmployerClinicianStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinicianIDChanging(int value);
    partial void OnClinicianIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnClinicianTypeIDChanging(int value);
    partial void OnClinicianTypeIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLiscenseIDChanging(int value);
    partial void OnLiscenseIDChanged();
    #endregion
		
		public tblClinician()
		{
			this._tblAddresses = new EntitySet<tblAddress>(new Action<tblAddress>(this.attach_tblAddresses), new Action<tblAddress>(this.detach_tblAddresses));
			this._tblClinicianTypes = new EntitySet<tblClinicianType>(new Action<tblClinicianType>(this.attach_tblClinicianTypes), new Action<tblClinicianType>(this.detach_tblClinicianTypes));
			this._tblEmployerClinicianStatus = new EntitySet<tblEmployerClinicianStatus>(new Action<tblEmployerClinicianStatus>(this.attach_tblEmployerClinicianStatus), new Action<tblEmployerClinicianStatus>(this.detach_tblEmployerClinicianStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicianID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClinicianID
		{
			get
			{
				return this._ClinicianID;
			}
			set
			{
				if ((this._ClinicianID != value))
				{
					this.OnClinicianIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicianID = value;
					this.SendPropertyChanged("ClinicianID");
					this.OnClinicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicianTypeID", DbType="Int NOT NULL")]
		public int ClinicianTypeID
		{
			get
			{
				return this._ClinicianTypeID;
			}
			set
			{
				if ((this._ClinicianTypeID != value))
				{
					this.OnClinicianTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicianTypeID = value;
					this.SendPropertyChanged("ClinicianTypeID");
					this.OnClinicianTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiscenseID", DbType="Int NOT NULL")]
		public int LiscenseID
		{
			get
			{
				return this._LiscenseID;
			}
			set
			{
				if ((this._LiscenseID != value))
				{
					this.OnLiscenseIDChanging(value);
					this.SendPropertyChanging();
					this._LiscenseID = value;
					this.SendPropertyChanged("LiscenseID");
					this.OnLiscenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClinician_tblAddress", Storage="_tblAddresses", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<tblAddress> tblAddresses
		{
			get
			{
				return this._tblAddresses;
			}
			set
			{
				this._tblAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClinician_tblClinicianType", Storage="_tblClinicianTypes", ThisKey="ClinicianTypeID", OtherKey="ClinicianTypeID")]
		public EntitySet<tblClinicianType> tblClinicianTypes
		{
			get
			{
				return this._tblClinicianTypes;
			}
			set
			{
				this._tblClinicianTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClinician_tblEmployerClinicianStatus", Storage="_tblEmployerClinicianStatus", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<tblEmployerClinicianStatus> tblEmployerClinicianStatus
		{
			get
			{
				return this._tblEmployerClinicianStatus;
			}
			set
			{
				this._tblEmployerClinicianStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAddresses(tblAddress entity)
		{
			this.SendPropertyChanging();
			entity.tblClinician = this;
		}
		
		private void detach_tblAddresses(tblAddress entity)
		{
			this.SendPropertyChanging();
			entity.tblClinician = null;
		}
		
		private void attach_tblClinicianTypes(tblClinicianType entity)
		{
			this.SendPropertyChanging();
			entity.tblClinician = this;
		}
		
		private void detach_tblClinicianTypes(tblClinicianType entity)
		{
			this.SendPropertyChanging();
			entity.tblClinician = null;
		}
		
		private void attach_tblEmployerClinicianStatus(tblEmployerClinicianStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblClinician = this;
		}
		
		private void detach_tblEmployerClinicianStatus(tblEmployerClinicianStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblClinician = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAddress")]
	public partial class tblAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private System.Nullable<decimal> _Longitude;
		
		private System.Nullable<decimal> _Latitude;
		
		private EntityRef<tblClinician> _tblClinician;
		
		private EntityRef<tblEmployer> _tblEmployer;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    #endregion
		
		public tblAddress()
		{
			this._tblClinician = default(EntityRef<tblClinician>);
			this._tblEmployer = default(EntityRef<tblEmployer>);
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (((this._tblClinician.HasLoadedOrAssignedValue || this._tblEmployer.HasLoadedOrAssignedValue) 
								|| this._tblJob.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(9,6)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClinician_tblAddress", Storage="_tblClinician", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public tblClinician tblClinician
		{
			get
			{
				return this._tblClinician.Entity;
			}
			set
			{
				tblClinician previousValue = this._tblClinician.Entity;
				if (((previousValue != value) 
							|| (this._tblClinician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblClinician.Entity = null;
						previousValue.tblAddresses.Remove(this);
					}
					this._tblClinician.Entity = value;
					if ((value != null))
					{
						value.tblAddresses.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("tblClinician");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmployer_tblAddress", Storage="_tblEmployer", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public tblEmployer tblEmployer
		{
			get
			{
				return this._tblEmployer.Entity;
			}
			set
			{
				tblEmployer previousValue = this._tblEmployer.Entity;
				if (((previousValue != value) 
							|| (this._tblEmployer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEmployer.Entity = null;
						previousValue.tblAddresses.Remove(this);
					}
					this._tblEmployer.Entity = value;
					if ((value != null))
					{
						value.tblAddresses.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("tblEmployer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblAddress", Storage="_tblJob", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblAddresses.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblAddresses.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEmployer")]
	public partial class tblEmployer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployerID;
		
		private string _UserName;
		
		private string _UserID;
		
		private string _CompanyName;
		
		private string _PhoneNumber;
		
		private int _StatusID;
		
		private int _AddressID;
		
		private int _DocumentID;
		
		private int _EmployerTypeID;
		
		private EntitySet<tblAddress> _tblAddresses;
		
		private EntitySet<tblEmployerClinicianStatus> _tblEmployerClinicianStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployerIDChanging(int value);
    partial void OnEmployerIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnEmployerTypeIDChanging(int value);
    partial void OnEmployerTypeIDChanged();
    #endregion
		
		public tblEmployer()
		{
			this._tblAddresses = new EntitySet<tblAddress>(new Action<tblAddress>(this.attach_tblAddresses), new Action<tblAddress>(this.detach_tblAddresses));
			this._tblEmployerClinicianStatus = new EntitySet<tblEmployerClinicianStatus>(new Action<tblEmployerClinicianStatus>(this.attach_tblEmployerClinicianStatus), new Action<tblEmployerClinicianStatus>(this.detach_tblEmployerClinicianStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployerID
		{
			get
			{
				return this._EmployerID;
			}
			set
			{
				if ((this._EmployerID != value))
				{
					this.OnEmployerIDChanging(value);
					this.SendPropertyChanging();
					this._EmployerID = value;
					this.SendPropertyChanged("EmployerID");
					this.OnEmployerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerTypeID", DbType="Int NOT NULL")]
		public int EmployerTypeID
		{
			get
			{
				return this._EmployerTypeID;
			}
			set
			{
				if ((this._EmployerTypeID != value))
				{
					this.OnEmployerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployerTypeID = value;
					this.SendPropertyChanged("EmployerTypeID");
					this.OnEmployerTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmployer_tblAddress", Storage="_tblAddresses", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<tblAddress> tblAddresses
		{
			get
			{
				return this._tblAddresses;
			}
			set
			{
				this._tblAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmployer_tblEmployerClinicianStatus", Storage="_tblEmployerClinicianStatus", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<tblEmployerClinicianStatus> tblEmployerClinicianStatus
		{
			get
			{
				return this._tblEmployerClinicianStatus;
			}
			set
			{
				this._tblEmployerClinicianStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAddresses(tblAddress entity)
		{
			this.SendPropertyChanging();
			entity.tblEmployer = this;
		}
		
		private void detach_tblAddresses(tblAddress entity)
		{
			this.SendPropertyChanging();
			entity.tblEmployer = null;
		}
		
		private void attach_tblEmployerClinicianStatus(tblEmployerClinicianStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblEmployer = this;
		}
		
		private void detach_tblEmployerClinicianStatus(tblEmployerClinicianStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblEmployer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAdminUsers")]
	public partial class tblAdminUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _EmailAddress;
		
		private System.Nullable<long> _PhoneNumber;
		
		private string _Password;
		
		private System.DateTime _RegistrationDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPhoneNumberChanging(System.Nullable<long> value);
    partial void OnPhoneNumberChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    #endregion
		
		public tblAdminUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(15)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(150)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(150)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(150)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="BigInt")]
		public System.Nullable<long> PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(10)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAvailability")]
	public partial class tblAvailability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AvailabilityID;
		
		private string _Value;
		
		private int _Order;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvailabilityIDChanging(int value);
    partial void OnAvailabilityIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblAvailability()
		{
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailabilityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AvailabilityID
		{
			get
			{
				return this._AvailabilityID;
			}
			set
			{
				if ((this._AvailabilityID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvailabilityIDChanging(value);
					this.SendPropertyChanging();
					this._AvailabilityID = value;
					this.SendPropertyChanged("AvailabilityID");
					this.OnAvailabilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblAvailability", Storage="_tblJob", ThisKey="AvailabilityID", OtherKey="AvailabilityID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblAvailabilities.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblAvailabilities.Add(this);
						this._AvailabilityID = value.AvailabilityID;
					}
					else
					{
						this._AvailabilityID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblJobs")]
	public partial class tblJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _Description;
		
		private int _AddressID;
		
		private int _YearsExpID;
		
		private int _EmployerID;
		
		private string _PosterUserID;
		
		private int _ClinicianID;
		
		private int _PositionTypeID;
		
		private int _LanguageID;
		
		private int _ServiceTypeID;
		
		private string _PatientPopulationType;
		
		private string _SalaryRange;
		
		private int _EmrErxExperienceTypeID;
		
		private int _AvailabilityID;
		
		private int _StatusID;
		
		private EntitySet<tblPositionType> _tblPositionTypes;
		
		private EntitySet<tblServiceType> _tblServiceTypes;
		
		private EntitySet<tblAvailability> _tblAvailabilities;
		
		private EntitySet<tblYearsExperience> _tblYearsExperiences;
		
		private EntitySet<tblAddress> _tblAddresses;
		
		private EntitySet<tblJobJobExperienceType> _tblJobJobExperienceTypes;
		
		private EntitySet<tblJobPatientPopulationType> _tblJobPatientPopulationTypes;
		
		private EntitySet<tblJobLanguage> _tblJobLanguages;
		
		private EntitySet<tblGeneralStatus> _tblGeneralStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnYearsExpIDChanging(int value);
    partial void OnYearsExpIDChanged();
    partial void OnEmployerIDChanging(int value);
    partial void OnEmployerIDChanged();
    partial void OnPosterUserIDChanging(string value);
    partial void OnPosterUserIDChanged();
    partial void OnClinicianIDChanging(int value);
    partial void OnClinicianIDChanged();
    partial void OnPositionTypeIDChanging(int value);
    partial void OnPositionTypeIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnServiceTypeIDChanging(int value);
    partial void OnServiceTypeIDChanged();
    partial void OnPatientPopulationTypeChanging(string value);
    partial void OnPatientPopulationTypeChanged();
    partial void OnSalaryRangeChanging(string value);
    partial void OnSalaryRangeChanged();
    partial void OnEmrErxExperienceTypeIDChanging(int value);
    partial void OnEmrErxExperienceTypeIDChanged();
    partial void OnAvailabilityIDChanging(int value);
    partial void OnAvailabilityIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public tblJob()
		{
			this._tblPositionTypes = new EntitySet<tblPositionType>(new Action<tblPositionType>(this.attach_tblPositionTypes), new Action<tblPositionType>(this.detach_tblPositionTypes));
			this._tblServiceTypes = new EntitySet<tblServiceType>(new Action<tblServiceType>(this.attach_tblServiceTypes), new Action<tblServiceType>(this.detach_tblServiceTypes));
			this._tblAvailabilities = new EntitySet<tblAvailability>(new Action<tblAvailability>(this.attach_tblAvailabilities), new Action<tblAvailability>(this.detach_tblAvailabilities));
			this._tblYearsExperiences = new EntitySet<tblYearsExperience>(new Action<tblYearsExperience>(this.attach_tblYearsExperiences), new Action<tblYearsExperience>(this.detach_tblYearsExperiences));
			this._tblAddresses = new EntitySet<tblAddress>(new Action<tblAddress>(this.attach_tblAddresses), new Action<tblAddress>(this.detach_tblAddresses));
			this._tblJobJobExperienceTypes = new EntitySet<tblJobJobExperienceType>(new Action<tblJobJobExperienceType>(this.attach_tblJobJobExperienceTypes), new Action<tblJobJobExperienceType>(this.detach_tblJobJobExperienceTypes));
			this._tblJobPatientPopulationTypes = new EntitySet<tblJobPatientPopulationType>(new Action<tblJobPatientPopulationType>(this.attach_tblJobPatientPopulationTypes), new Action<tblJobPatientPopulationType>(this.detach_tblJobPatientPopulationTypes));
			this._tblJobLanguages = new EntitySet<tblJobLanguage>(new Action<tblJobLanguage>(this.attach_tblJobLanguages), new Action<tblJobLanguage>(this.detach_tblJobLanguages));
			this._tblGeneralStatus = new EntitySet<tblGeneralStatus>(new Action<tblGeneralStatus>(this.attach_tblGeneralStatus), new Action<tblGeneralStatus>(this.detach_tblGeneralStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(5000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsExpID", DbType="Int NOT NULL")]
		public int YearsExpID
		{
			get
			{
				return this._YearsExpID;
			}
			set
			{
				if ((this._YearsExpID != value))
				{
					this.OnYearsExpIDChanging(value);
					this.SendPropertyChanging();
					this._YearsExpID = value;
					this.SendPropertyChanged("YearsExpID");
					this.OnYearsExpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerID", DbType="Int NOT NULL")]
		public int EmployerID
		{
			get
			{
				return this._EmployerID;
			}
			set
			{
				if ((this._EmployerID != value))
				{
					this.OnEmployerIDChanging(value);
					this.SendPropertyChanging();
					this._EmployerID = value;
					this.SendPropertyChanged("EmployerID");
					this.OnEmployerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosterUserID", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string PosterUserID
		{
			get
			{
				return this._PosterUserID;
			}
			set
			{
				if ((this._PosterUserID != value))
				{
					this.OnPosterUserIDChanging(value);
					this.SendPropertyChanging();
					this._PosterUserID = value;
					this.SendPropertyChanged("PosterUserID");
					this.OnPosterUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicianID", DbType="Int NOT NULL")]
		public int ClinicianID
		{
			get
			{
				return this._ClinicianID;
			}
			set
			{
				if ((this._ClinicianID != value))
				{
					this.OnClinicianIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicianID = value;
					this.SendPropertyChanged("ClinicianID");
					this.OnClinicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionTypeID", DbType="Int NOT NULL")]
		public int PositionTypeID
		{
			get
			{
				return this._PositionTypeID;
			}
			set
			{
				if ((this._PositionTypeID != value))
				{
					this.OnPositionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PositionTypeID = value;
					this.SendPropertyChanged("PositionTypeID");
					this.OnPositionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeID", DbType="Int NOT NULL")]
		public int ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientPopulationType", DbType="VarChar(150)")]
		public string PatientPopulationType
		{
			get
			{
				return this._PatientPopulationType;
			}
			set
			{
				if ((this._PatientPopulationType != value))
				{
					this.OnPatientPopulationTypeChanging(value);
					this.SendPropertyChanging();
					this._PatientPopulationType = value;
					this.SendPropertyChanged("PatientPopulationType");
					this.OnPatientPopulationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryRange", DbType="VarChar(15)")]
		public string SalaryRange
		{
			get
			{
				return this._SalaryRange;
			}
			set
			{
				if ((this._SalaryRange != value))
				{
					this.OnSalaryRangeChanging(value);
					this.SendPropertyChanging();
					this._SalaryRange = value;
					this.SendPropertyChanged("SalaryRange");
					this.OnSalaryRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmrErxExperienceTypeID", DbType="Int NOT NULL")]
		public int EmrErxExperienceTypeID
		{
			get
			{
				return this._EmrErxExperienceTypeID;
			}
			set
			{
				if ((this._EmrErxExperienceTypeID != value))
				{
					this.OnEmrErxExperienceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmrErxExperienceTypeID = value;
					this.SendPropertyChanged("EmrErxExperienceTypeID");
					this.OnEmrErxExperienceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailabilityID", DbType="Int NOT NULL")]
		public int AvailabilityID
		{
			get
			{
				return this._AvailabilityID;
			}
			set
			{
				if ((this._AvailabilityID != value))
				{
					this.OnAvailabilityIDChanging(value);
					this.SendPropertyChanging();
					this._AvailabilityID = value;
					this.SendPropertyChanged("AvailabilityID");
					this.OnAvailabilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblPositionType", Storage="_tblPositionTypes", ThisKey="PositionTypeID", OtherKey="PositionTypeID")]
		public EntitySet<tblPositionType> tblPositionTypes
		{
			get
			{
				return this._tblPositionTypes;
			}
			set
			{
				this._tblPositionTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblServiceType", Storage="_tblServiceTypes", ThisKey="ServiceTypeID", OtherKey="ServiceTypeID")]
		public EntitySet<tblServiceType> tblServiceTypes
		{
			get
			{
				return this._tblServiceTypes;
			}
			set
			{
				this._tblServiceTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblAvailability", Storage="_tblAvailabilities", ThisKey="AvailabilityID", OtherKey="AvailabilityID")]
		public EntitySet<tblAvailability> tblAvailabilities
		{
			get
			{
				return this._tblAvailabilities;
			}
			set
			{
				this._tblAvailabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblYearsExperience", Storage="_tblYearsExperiences", ThisKey="YearsExpID", OtherKey="YearExpID")]
		public EntitySet<tblYearsExperience> tblYearsExperiences
		{
			get
			{
				return this._tblYearsExperiences;
			}
			set
			{
				this._tblYearsExperiences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblAddress", Storage="_tblAddresses", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<tblAddress> tblAddresses
		{
			get
			{
				return this._tblAddresses;
			}
			set
			{
				this._tblAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblJobJobExperienceType", Storage="_tblJobJobExperienceTypes", ThisKey="ID", OtherKey="JobID")]
		public EntitySet<tblJobJobExperienceType> tblJobJobExperienceTypes
		{
			get
			{
				return this._tblJobJobExperienceTypes;
			}
			set
			{
				this._tblJobJobExperienceTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblJobPatientPopulationType", Storage="_tblJobPatientPopulationTypes", ThisKey="ID", OtherKey="JobID")]
		public EntitySet<tblJobPatientPopulationType> tblJobPatientPopulationTypes
		{
			get
			{
				return this._tblJobPatientPopulationTypes;
			}
			set
			{
				this._tblJobPatientPopulationTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblJobLanguage", Storage="_tblJobLanguages", ThisKey="ID", OtherKey="JobID")]
		public EntitySet<tblJobLanguage> tblJobLanguages
		{
			get
			{
				return this._tblJobLanguages;
			}
			set
			{
				this._tblJobLanguages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblGeneralStatus", Storage="_tblGeneralStatus", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<tblGeneralStatus> tblGeneralStatus
		{
			get
			{
				return this._tblGeneralStatus;
			}
			set
			{
				this._tblGeneralStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPositionTypes(tblPositionType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblPositionTypes(tblPositionType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblServiceTypes(tblServiceType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblServiceTypes(tblServiceType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblAvailabilities(tblAvailability entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblAvailabilities(tblAvailability entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblYearsExperiences(tblYearsExperience entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblYearsExperiences(tblYearsExperience entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblAddresses(tblAddress entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblAddresses(tblAddress entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblJobJobExperienceTypes(tblJobJobExperienceType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblJobJobExperienceTypes(tblJobJobExperienceType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblJobPatientPopulationTypes(tblJobPatientPopulationType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblJobPatientPopulationTypes(tblJobPatientPopulationType entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblJobLanguages(tblJobLanguage entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblJobLanguages(tblJobLanguage entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
		
		private void attach_tblGeneralStatus(tblGeneralStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = this;
		}
		
		private void detach_tblGeneralStatus(tblGeneralStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblJob = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClinicianLanguage")]
	public partial class tblClinicianLanguage
	{
		
		private int _ID;
		
		private int _ClinicianID;
		
		private int _LanguageID;
		
		public tblClinicianLanguage()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicianID", DbType="Int NOT NULL")]
		public int ClinicianID
		{
			get
			{
				return this._ClinicianID;
			}
			set
			{
				if ((this._ClinicianID != value))
				{
					this._ClinicianID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this._LanguageID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblLanguages")]
	public partial class tblLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _Language;
		
		private System.Nullable<int> _Order;
		
		private EntityRef<tblJobLanguage> _tblJobLanguage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    #endregion
		
		public tblLanguage()
		{
			this._tblJobLanguage = default(EntityRef<tblJobLanguage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._tblJobLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="VarChar(25)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJobLanguage_tblLanguage", Storage="_tblJobLanguage", ThisKey="LanguageID", OtherKey="LanguageID", IsForeignKey=true)]
		public tblJobLanguage tblJobLanguage
		{
			get
			{
				return this._tblJobLanguage.Entity;
			}
			set
			{
				tblJobLanguage previousValue = this._tblJobLanguage.Entity;
				if (((previousValue != value) 
							|| (this._tblJobLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJobLanguage.Entity = null;
						previousValue.tblLanguages.Remove(this);
					}
					this._tblJobLanguage.Entity = value;
					if ((value != null))
					{
						value.tblLanguages.Add(this);
						this._LanguageID = value.LanguageID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("tblJobLanguage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPositionType")]
	public partial class tblPositionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionTypeID;
		
		private string _Value;
		
		private int _Order;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionTypeIDChanging(int value);
    partial void OnPositionTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblPositionType()
		{
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionTypeID
		{
			get
			{
				return this._PositionTypeID;
			}
			set
			{
				if ((this._PositionTypeID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PositionTypeID = value;
					this.SendPropertyChanged("PositionTypeID");
					this.OnPositionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblPositionType", Storage="_tblJob", ThisKey="PositionTypeID", OtherKey="PositionTypeID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblPositionTypes.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblPositionTypes.Add(this);
						this._PositionTypeID = value.PositionTypeID;
					}
					else
					{
						this._PositionTypeID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblServiceType")]
	public partial class tblServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceTypeID;
		
		private string _Value;
		
		private int _Order;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceTypeIDChanging(int value);
    partial void OnServiceTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblServiceType()
		{
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblServiceType", Storage="_tblJob", ThisKey="ServiceTypeID", OtherKey="ServiceTypeID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblServiceTypes.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblServiceTypes.Add(this);
						this._ServiceTypeID = value.ServiceTypeID;
					}
					else
					{
						this._ServiceTypeID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblYearsExperience")]
	public partial class tblYearsExperience : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearExpID;
		
		private string _Value;
		
		private int _Order;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearExpIDChanging(int value);
    partial void OnYearExpIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblYearsExperience()
		{
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearExpID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int YearExpID
		{
			get
			{
				return this._YearExpID;
			}
			set
			{
				if ((this._YearExpID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearExpIDChanging(value);
					this.SendPropertyChanging();
					this._YearExpID = value;
					this.SendPropertyChanged("YearExpID");
					this.OnYearExpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblYearsExperience", Storage="_tblJob", ThisKey="YearExpID", OtherKey="YearsExpID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblYearsExperiences.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblYearsExperiences.Add(this);
						this._YearExpID = value.YearsExpID;
					}
					else
					{
						this._YearExpID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblJobJobExperienceType")]
	public partial class tblJobJobExperienceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _JobID;
		
		private int _JobExperienceTypeID;
		
		private EntitySet<tblJobExperienceType> _tblJobExperienceTypes;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnJobExperienceTypeIDChanging(int value);
    partial void OnJobExperienceTypeIDChanged();
    #endregion
		
		public tblJobJobExperienceType()
		{
			this._tblJobExperienceTypes = new EntitySet<tblJobExperienceType>(new Action<tblJobExperienceType>(this.attach_tblJobExperienceTypes), new Action<tblJobExperienceType>(this.detach_tblJobExperienceTypes));
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="JobExperienceType", Storage="_JobExperienceTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobExperienceTypeID
		{
			get
			{
				return this._JobExperienceTypeID;
			}
			set
			{
				if ((this._JobExperienceTypeID != value))
				{
					this.OnJobExperienceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._JobExperienceTypeID = value;
					this.SendPropertyChanged("JobExperienceTypeID");
					this.OnJobExperienceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJobJobExperienceType_tblJobExperienceType", Storage="_tblJobExperienceTypes", ThisKey="JobExperienceTypeID", OtherKey="JobExperienceTypeID")]
		public EntitySet<tblJobExperienceType> tblJobExperienceTypes
		{
			get
			{
				return this._tblJobExperienceTypes;
			}
			set
			{
				this._tblJobExperienceTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblJobJobExperienceType", Storage="_tblJob", ThisKey="JobID", OtherKey="ID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblJobJobExperienceTypes.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblJobJobExperienceTypes.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblJobExperienceTypes(tblJobExperienceType entity)
		{
			this.SendPropertyChanging();
			entity.tblJobJobExperienceType = this;
		}
		
		private void detach_tblJobExperienceTypes(tblJobExperienceType entity)
		{
			this.SendPropertyChanging();
			entity.tblJobJobExperienceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblJobLanguage")]
	public partial class tblJobLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _JobID;
		
		private int _LanguageID;
		
		private EntitySet<tblLanguage> _tblLanguages;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    #endregion
		
		public tblJobLanguage()
		{
			this._tblLanguages = new EntitySet<tblLanguage>(new Action<tblLanguage>(this.attach_tblLanguages), new Action<tblLanguage>(this.detach_tblLanguages));
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJobLanguage_tblLanguage", Storage="_tblLanguages", ThisKey="LanguageID", OtherKey="LanguageID")]
		public EntitySet<tblLanguage> tblLanguages
		{
			get
			{
				return this._tblLanguages;
			}
			set
			{
				this._tblLanguages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblJobLanguage", Storage="_tblJob", ThisKey="JobID", OtherKey="ID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblJobLanguages.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblJobLanguages.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblLanguages(tblLanguage entity)
		{
			this.SendPropertyChanging();
			entity.tblJobLanguage = this;
		}
		
		private void detach_tblLanguages(tblLanguage entity)
		{
			this.SendPropertyChanging();
			entity.tblJobLanguage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblJobExperienceType")]
	public partial class tblJobExperienceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobExperienceTypeID;
		
		private string _Value;
		
		private int _Order;
		
		private EntityRef<tblJobJobExperienceType> _tblJobJobExperienceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobExperienceTypeIDChanging(int value);
    partial void OnJobExperienceTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblJobExperienceType()
		{
			this._tblJobJobExperienceType = default(EntityRef<tblJobJobExperienceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobExperienceTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobExperienceTypeID
		{
			get
			{
				return this._JobExperienceTypeID;
			}
			set
			{
				if ((this._JobExperienceTypeID != value))
				{
					if (this._tblJobJobExperienceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobExperienceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._JobExperienceTypeID = value;
					this.SendPropertyChanged("JobExperienceTypeID");
					this.OnJobExperienceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJobJobExperienceType_tblJobExperienceType", Storage="_tblJobJobExperienceType", ThisKey="JobExperienceTypeID", OtherKey="JobExperienceTypeID", IsForeignKey=true)]
		public tblJobJobExperienceType tblJobJobExperienceType
		{
			get
			{
				return this._tblJobJobExperienceType.Entity;
			}
			set
			{
				tblJobJobExperienceType previousValue = this._tblJobJobExperienceType.Entity;
				if (((previousValue != value) 
							|| (this._tblJobJobExperienceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJobJobExperienceType.Entity = null;
						previousValue.tblJobExperienceTypes.Remove(this);
					}
					this._tblJobJobExperienceType.Entity = value;
					if ((value != null))
					{
						value.tblJobExperienceTypes.Add(this);
						this._JobExperienceTypeID = value.JobExperienceTypeID;
					}
					else
					{
						this._JobExperienceTypeID = default(int);
					}
					this.SendPropertyChanged("tblJobJobExperienceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblJobPatientPopulationType")]
	public partial class tblJobPatientPopulationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobPatientPopulationID;
		
		private int _JobID;
		
		private int _PatientPopulationTypeID;
		
		private EntitySet<tblPatientPopulationType> _tblPatientPopulationTypes;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobPatientPopulationIDChanging(int value);
    partial void OnJobPatientPopulationIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnPatientPopulationTypeIDChanging(int value);
    partial void OnPatientPopulationTypeIDChanged();
    #endregion
		
		public tblJobPatientPopulationType()
		{
			this._tblPatientPopulationTypes = new EntitySet<tblPatientPopulationType>(new Action<tblPatientPopulationType>(this.attach_tblPatientPopulationTypes), new Action<tblPatientPopulationType>(this.detach_tblPatientPopulationTypes));
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobPatientPopulationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobPatientPopulationID
		{
			get
			{
				return this._JobPatientPopulationID;
			}
			set
			{
				if ((this._JobPatientPopulationID != value))
				{
					this.OnJobPatientPopulationIDChanging(value);
					this.SendPropertyChanging();
					this._JobPatientPopulationID = value;
					this.SendPropertyChanged("JobPatientPopulationID");
					this.OnJobPatientPopulationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientPopulationTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientPopulationTypeID
		{
			get
			{
				return this._PatientPopulationTypeID;
			}
			set
			{
				if ((this._PatientPopulationTypeID != value))
				{
					this.OnPatientPopulationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PatientPopulationTypeID = value;
					this.SendPropertyChanged("PatientPopulationTypeID");
					this.OnPatientPopulationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJobPatientPopulationType_tblPatientPopulationType", Storage="_tblPatientPopulationTypes", ThisKey="PatientPopulationTypeID", OtherKey="PatientPopulationTypeID")]
		public EntitySet<tblPatientPopulationType> tblPatientPopulationTypes
		{
			get
			{
				return this._tblPatientPopulationTypes;
			}
			set
			{
				this._tblPatientPopulationTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblJobPatientPopulationType", Storage="_tblJob", ThisKey="JobID", OtherKey="ID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblJobPatientPopulationTypes.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblJobPatientPopulationTypes.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPatientPopulationTypes(tblPatientPopulationType entity)
		{
			this.SendPropertyChanging();
			entity.tblJobPatientPopulationType = this;
		}
		
		private void detach_tblPatientPopulationTypes(tblPatientPopulationType entity)
		{
			this.SendPropertyChanging();
			entity.tblJobPatientPopulationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPatientPopulationType")]
	public partial class tblPatientPopulationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientPopulationTypeID;
		
		private string _Value;
		
		private int _Order;
		
		private EntityRef<tblJobPatientPopulationType> _tblJobPatientPopulationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientPopulationTypeIDChanging(int value);
    partial void OnPatientPopulationTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblPatientPopulationType()
		{
			this._tblJobPatientPopulationType = default(EntityRef<tblJobPatientPopulationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientPopulationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientPopulationTypeID
		{
			get
			{
				return this._PatientPopulationTypeID;
			}
			set
			{
				if ((this._PatientPopulationTypeID != value))
				{
					if (this._tblJobPatientPopulationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientPopulationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PatientPopulationTypeID = value;
					this.SendPropertyChanged("PatientPopulationTypeID");
					this.OnPatientPopulationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJobPatientPopulationType_tblPatientPopulationType", Storage="_tblJobPatientPopulationType", ThisKey="PatientPopulationTypeID", OtherKey="PatientPopulationTypeID", IsForeignKey=true)]
		public tblJobPatientPopulationType tblJobPatientPopulationType
		{
			get
			{
				return this._tblJobPatientPopulationType.Entity;
			}
			set
			{
				tblJobPatientPopulationType previousValue = this._tblJobPatientPopulationType.Entity;
				if (((previousValue != value) 
							|| (this._tblJobPatientPopulationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJobPatientPopulationType.Entity = null;
						previousValue.tblPatientPopulationTypes.Remove(this);
					}
					this._tblJobPatientPopulationType.Entity = value;
					if ((value != null))
					{
						value.tblPatientPopulationTypes.Add(this);
						this._PatientPopulationTypeID = value.PatientPopulationTypeID;
					}
					else
					{
						this._PatientPopulationTypeID = default(int);
					}
					this.SendPropertyChanged("tblJobPatientPopulationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClinicianType")]
	public partial class tblClinicianType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClinicianTypeID;
		
		private string _Type;
		
		private int _Order;
		
		private EntityRef<tblClinician> _tblClinician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinicianTypeIDChanging(int value);
    partial void OnClinicianTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public tblClinicianType()
		{
			this._tblClinician = default(EntityRef<tblClinician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicianTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClinicianTypeID
		{
			get
			{
				return this._ClinicianTypeID;
			}
			set
			{
				if ((this._ClinicianTypeID != value))
				{
					if (this._tblClinician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClinicianTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClinicianTypeID = value;
					this.SendPropertyChanged("ClinicianTypeID");
					this.OnClinicianTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClinician_tblClinicianType", Storage="_tblClinician", ThisKey="ClinicianTypeID", OtherKey="ClinicianTypeID", IsForeignKey=true)]
		public tblClinician tblClinician
		{
			get
			{
				return this._tblClinician.Entity;
			}
			set
			{
				tblClinician previousValue = this._tblClinician.Entity;
				if (((previousValue != value) 
							|| (this._tblClinician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblClinician.Entity = null;
						previousValue.tblClinicianTypes.Remove(this);
					}
					this._tblClinician.Entity = value;
					if ((value != null))
					{
						value.tblClinicianTypes.Add(this);
						this._ClinicianTypeID = value.ClinicianTypeID;
					}
					else
					{
						this._ClinicianTypeID = default(int);
					}
					this.SendPropertyChanged("tblClinician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEmrErxExperienceType")]
	public partial class tblEmrErxExperienceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmrErxExperienceTypeID;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmrErxExperienceTypeIDChanging(int value);
    partial void OnEmrErxExperienceTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public tblEmrErxExperienceType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmrErxExperienceTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmrErxExperienceTypeID
		{
			get
			{
				return this._EmrErxExperienceTypeID;
			}
			set
			{
				if ((this._EmrErxExperienceTypeID != value))
				{
					this.OnEmrErxExperienceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmrErxExperienceTypeID = value;
					this.SendPropertyChanged("EmrErxExperienceTypeID");
					this.OnEmrErxExperienceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEmployerClinicianStatus")]
	public partial class tblEmployerClinicianStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _Status;
		
		private System.Nullable<int> _Order;
		
		private EntityRef<tblClinician> _tblClinician;
		
		private EntityRef<tblEmployer> _tblEmployer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    #endregion
		
		public tblEmployerClinicianStatus()
		{
			this._tblClinician = default(EntityRef<tblClinician>);
			this._tblEmployer = default(EntityRef<tblEmployer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if ((this._tblClinician.HasLoadedOrAssignedValue || this._tblEmployer.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClinician_tblEmployerClinicianStatus", Storage="_tblClinician", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public tblClinician tblClinician
		{
			get
			{
				return this._tblClinician.Entity;
			}
			set
			{
				tblClinician previousValue = this._tblClinician.Entity;
				if (((previousValue != value) 
							|| (this._tblClinician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblClinician.Entity = null;
						previousValue.tblEmployerClinicianStatus.Remove(this);
					}
					this._tblClinician.Entity = value;
					if ((value != null))
					{
						value.tblEmployerClinicianStatus.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("tblClinician");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmployer_tblEmployerClinicianStatus", Storage="_tblEmployer", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public tblEmployer tblEmployer
		{
			get
			{
				return this._tblEmployer.Entity;
			}
			set
			{
				tblEmployer previousValue = this._tblEmployer.Entity;
				if (((previousValue != value) 
							|| (this._tblEmployer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEmployer.Entity = null;
						previousValue.tblEmployerClinicianStatus.Remove(this);
					}
					this._tblEmployer.Entity = value;
					if ((value != null))
					{
						value.tblEmployerClinicianStatus.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("tblEmployer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblGeneralStatus")]
	public partial class tblGeneralStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _Status;
		
		private EntityRef<tblJob> _tblJob;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public tblGeneralStatus()
		{
			this._tblJob = default(EntityRef<tblJob>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._tblJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblJob_tblGeneralStatus", Storage="_tblJob", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public tblJob tblJob
		{
			get
			{
				return this._tblJob.Entity;
			}
			set
			{
				tblJob previousValue = this._tblJob.Entity;
				if (((previousValue != value) 
							|| (this._tblJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblJob.Entity = null;
						previousValue.tblGeneralStatus.Remove(this);
					}
					this._tblJob.Entity = value;
					if ((value != null))
					{
						value.tblGeneralStatus.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("tblJob");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClinicianJobs")]
	public partial class tblClinicianJob
	{
		
		private System.Nullable<int> _ID;
		
		private int _ClinicianID;
		
		private int _JobID;
		
		private int _StatusID;
		
		private System.DateTime _MatchDate;
		
		private string _MatchBy;
		
		public tblClinicianJob()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicianID", DbType="Int NOT NULL")]
		public int ClinicianID
		{
			get
			{
				return this._ClinicianID;
			}
			set
			{
				if ((this._ClinicianID != value))
				{
					this._ClinicianID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this._JobID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate", DbType="DateTime NOT NULL")]
		public System.DateTime MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this._MatchDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchBy", DbType="VarChar(25)")]
		public string MatchBy
		{
			get
			{
				return this._MatchBy;
			}
			set
			{
				if ((this._MatchBy != value))
				{
					this._MatchBy = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
